from discord import *
from discord.ui import View
from datetime import timedelta


class QuestTypeView(View):
    def __init__(self) -> None:
        super().__init__(timeout=None)
        self.value = None

    @ui.select(
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞",
        options=[
            SelectOption(label="–î–µ–π–ª–∏–∫", emoji="üü¶"),
            SelectOption(label="–û–±—ã—á–Ω—ã–π", emoji="üü™"),
            SelectOption(label="–ò–≤–µ–Ω—Ç", emoji="üüß")
        ],
    )
    async def select_callback(self, interaction, select):
        if select.values[0] is not None:
            self.value = select.values[0]

    def get_value(self):
        return self.value


class TimeDeltaView(View):
    def __init__(self) -> None:
        super().__init__(timeout=None)
        self.time = None

    @ui.select(
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è",
        options=[
            SelectOption(label="–°—Ä–∞–∑—É", emoji="0Ô∏è‚É£"),
            SelectOption(label="–ß–µ—Ä–µ–∑ 1 —á–∞—Å", emoji="1Ô∏è‚É£"),
            SelectOption(label="–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞", emoji="2Ô∏è‚É£"),
            SelectOption(label="–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞", emoji="3Ô∏è‚É£"),
            SelectOption(label="–ß–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤", emoji="6Ô∏è‚É£"),
            SelectOption(label="–ß–µ—Ä–µ–∑ 1 –¥–µ–Ω—å", emoji="1Ô∏è‚É£"),
            SelectOption(label="–ß–µ—Ä–µ–∑ 2 –¥–Ω—è", emoji="2Ô∏è‚É£"),
            SelectOption(label="–ß–µ—Ä–µ–∑ 3 –¥–Ω—è", emoji="3Ô∏è‚É£"),
            SelectOption(label="–ß–µ—Ä–µ–∑ 1 –Ω–µ–¥–µ–ª—é", emoji="1Ô∏è‚É£"),
            SelectOption(label="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", emoji="#Ô∏è‚É£")
        ]
    )
    async def select_callback(self, interaction, select) -> timedelta or str:
        match select.values[0]:
            case "–°—Ä–∞–∑—É":
                self.time = timedelta(microseconds=1)
            case "–ß–µ—Ä–µ–∑ 1 —á–∞—Å":
                self.time = timedelta(hours=1)
            case "–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞":
                self.time = timedelta(hours=2)
            case "–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞":
                self.time = timedelta(hours=3)
            case "–ß–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤":
                self.time = timedelta(hours=6)
            case "–ß–µ—Ä–µ–∑ 1 –¥–µ–Ω—å":
                self.time = timedelta(days=1)
            case "–ß–µ—Ä–µ–∑ 2 –¥–Ω—è":
                self.time = timedelta(days=2)
            case "–ß–µ—Ä–µ–∑ 3 –¥–Ω—è":
                self.time = timedelta(days=3)
            case "–ß–µ—Ä–µ–∑ 1 –Ω–µ–¥–µ–ª—é":
                self.time = timedelta(days=7)
            case "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
                self.time = "by hand"

    def get_time_delta(self) -> timedelta or str or None:
        return self.time


class QuestView(View):
    def __init__(self, bot, players_with_quest=None, max_players=0, current_players=None) -> None:
        super().__init__(timeout=None)
        self.max_players = max_players
        if current_players is None:
            self.current_players = max_players
        else:
            self.current_players = current_players
        if players_with_quest is None:
            self.players_with_quest = []
        else:
            self.players_with_quest = players_with_quest
        self.bot = bot

    @ui.button(label="–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç", style=ButtonStyle.green, emoji="‚úÖ", custom_id="QuestYesButton")
    async def quest_yes_button_callback(self, interaction, button):
        if interaction.user.id in self.players_with_quest:
            await interaction.response.defer()
            return
        count_embed = Embed()
        if self.max_players is not None:
            if not button.disabled:
                self.current_players -= 1
            if self.current_players == 0:
                button.disabled = True
                button.emoji = "‚ùå"
            count_embed.add_field(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç", value=f"{self.current_players}/{self.max_players}")
        else:
            count_embed.add_field(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ", value="")
        self.players_with_quest.append(interaction.user.id)
        print(self.players_with_quest)
        self.bot.dispatch("accepted_quest", interaction.user, interaction.message)
        await interaction.response.edit_message(view=self, embed=count_embed)

    @ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∫–≤–µ—Å—Ç–∞", style=ButtonStyle.red, emoji="üíÄ", custom_id="QuestNoButton")
    async def quest_no_button_callback(self, interaction, button):
        if interaction.user.id not in self.players_with_quest:
            await interaction.response.defer()
            return
        if self.children[0].disabled:
            self.children[0].disabled = False
            self.children[0].emoji = "‚úÖ"
        self.current_players += 1
        count_embed = Embed()
        count_embed.add_field(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç", value=f"{self.current_players}/{self.max_players}")
        self.bot.dispatch("refused_quest", interaction.user, interaction.message)
        self.players_with_quest.remove(interaction.user.id)
        await interaction.response.edit_message(view=self, embed=count_embed)
